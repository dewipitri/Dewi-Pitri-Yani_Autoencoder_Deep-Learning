# -*- coding: utf-8 -*-
"""Dewi Pitri Yani_Autoencoder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VNYUkkFVtC3reVFzk9W8o0Ji8iJtMVCp
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive

# 1. Mount ke path default
drive.mount('/content/drive')

# 2. Akses folder Anda
train_path = '/content/drive/MyDrive/Dataset'

# Verifikasi path
import os
if os.path.exists(train_path):
    print("✅ Path valid!")
else:
    print(f"❌ Folder tidak ditemukan. Periksa: {train_path}")

import tensorflow as tf
from tensorflow.keras import layers, models, Input
import os
import cv2
import numpy as np
from tqdm import tqdm
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# --- Konfigurasi ---
IMG_SIZE = 256  # Ukuran gambar target
COLOR_DIR = "/content/drive/MyDrive/Dataset/train/color"  # Path ke folder gambar berwarna
GRAY_DIR = "/content/drive/MyDrive/Dataset/train/grayscale" # Path ke folder gambar grayscale
BATCH_SIZE = 32 #Ukuran batch, coba sesuaikan dengan memori
EPOCHS = 30 # Jumlah epoch, atur sesuai kebutuhan
VALIDATION_SPLIT = 0.1 # Ukuran data validasi

# --- Load dan Preprocess Gambar ---
def load_images(color_folder, gray_folder, img_size):
    images_gray, images_color = [], []
    color_files = os.listdir(color_folder)
    gray_files = os.listdir(gray_folder)

    # pastikan jumlah file sama
    num_images = min(len(color_files), len(gray_files))
    print(f"Loading {num_images} images...")

    for i in tqdm(range(num_images)):
        # Pastikan nama file sesuai, lalu menggabungkannya
        color_path = os.path.join(color_folder, color_files[i])
        gray_path = os.path.join(gray_folder, gray_files[i])

        img_color = cv2.imread(color_path)
        img_gray = cv2.imread(gray_path, cv2.IMREAD_GRAYSCALE)

        if img_color is None or img_gray is None:
            print(f"Skipping {color_files[i]} due to read error.")
            continue

        # Praproses gambar
        img_rgb = cv2.cvtColor(img_color, cv2.COLOR_BGR2RGB)
        img_rgb = cv2.resize(img_rgb, (img_size, img_size))
        img_rgb = img_rgb.astype("float32") / 255.0

        img_gray = cv2.resize(img_gray, (img_size, img_size))
        img_gray = np.expand_dims(img_gray, axis=-1).astype("float32") / 255.0

        images_gray.append(img_gray)
        images_color.append(img_rgb)

    return np.array(images_gray), np.array(images_color)

# Load data
X_gray, X_color = load_images(COLOR_DIR, GRAY_DIR, IMG_SIZE)

# Split data train/val
X_train_gray, X_val_gray, X_train_color, X_val_color = train_test_split(
    X_gray, X_color, test_size=VALIDATION_SPLIT, random_state=42)

print("Data loaded and preprocessed.")
print(f"Jumlah data training: {len(X_train_gray)}")
print(f"Jumlah data validasi: {len(X_val_gray)}")

# --- Model Autoencoder ---
input_img = Input(shape=(IMG_SIZE, IMG_SIZE, 1))

# Encoder
x = layers.Conv2D(64, (3, 3), activation='relu', padding='same')(input_img)
x = layers.MaxPooling2D((2, 2), padding='same')(x)
x = layers.Conv2D(128, (3, 3), activation='relu', padding='same')(x)
encoded = layers.MaxPooling2D((2, 2), padding='same')(x)

# Decoder
x = layers.Conv2D(128, (3, 3), activation='relu', padding='same')(encoded)
x = layers.UpSampling2D((2, 2))(x)
x = layers.Conv2D(64, (3, 3), activation='relu', padding='same')(x)
x = layers.UpSampling2D((2, 2))(x)
decoded = layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)

model = models.Model(input_img, decoded)
model.compile(optimizer='Adam', loss='mse')

print("Model compiled.")

# --- Callbacks ---
#EarlyStopping: Stop training when a monitored metric has stopped improving.
early_stopping = tf.keras.callbacks.EarlyStopping(
    monitor='val_loss',
    patience=10,
    restore_best_weights=True
)

print("Callbacks configured.")

# --- Fungsi untuk menampilkan hasil ---
def show_results(model, X_gray, X_color, n=5):
    preds = model.predict(X_gray[:n])

    plt.figure(figsize=(15, 5))

    for i in range(n):
        # Grayscale
        plt.subplot(3, n, i + 1)
        plt.imshow(X_gray[i].squeeze(), cmap='gray')
        plt.title("Grayscale")
        plt.axis('off')

        # Hasil Pewarnaan
        plt.subplot(3, n, i + 1 + n)
        plt.imshow((preds[i] * 255).astype(np.uint8))
        plt.title("Colorized")
        plt.axis('off')

        # Warna Asli
        plt.subplot(3, n, i + 1 + 2 * n)
        plt.imshow((X_color[i] * 255).astype(np.uint8))
        plt.title("Original")
        plt.axis('off')

    plt.tight_layout()
    plt.show()

# --- Latih Model ---
model.fit(X_train_gray, X_train_color,
          epochs=EPOCHS,
          batch_size=BATCH_SIZE,
          shuffle=True,
          validation_data=(X_val_gray, X_val_color),
          callbacks=[early_stopping])

print("Model training complete.")

# --- Tampilkan Hasil ---
show_results(model, X_val_gray, X_val_color, n=5)

print("Results displayed.")